name: Python Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        # Install other dependencies
        pip install spacy benepar nltk
        # Install PyTorch (CPU only)
        pip install torch --extra-index-url https://download.pytorch.org/whl/cpu
      timeout-minutes: 5
    - name: Install spaCy and NLTK
      run: |
        pip install spacy==3.7.5 nltk
      timeout-minutes: 5
    - name: Install benepar
      run: |
        pip install benepar
      timeout-minutes: 5
    - name: Download models
      run: |
        python -c "import nltk; nltk.download('punkt')"
        python -c "import benepar; benepar.download('benepar_en3')"
        python -c "import spacy; spacy.cli.download('en_core_web_sm')"
    - name: Install package
      run: |
        pip install -e .
    - name: Run tests
      run: |
        pytest tests/ --cov=anpe --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  publish:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m build
        python -m twine upload dist/* 