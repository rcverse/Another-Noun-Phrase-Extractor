name: Python Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        # Install PyTorch (CPU only)
        pip install torch --extra-index-url https://download.pytorch.org/whl/cpu
      timeout-minutes: 15
    - name: Install spaCy, NLTK, and benepar
      run: |
        pip install spacy nltk benepar
      timeout-minutes: 15
    - name: Set NLTK data path (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $nltkDataPath = "$env:USERPROFILE\nltk_data"
        mkdir -p $nltkDataPath
        echo "NLTK_DATA=$nltkDataPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: Set NLTK data path (macOS/Linux)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        mkdir -p ~/nltk_data
        echo "NLTK_DATA=~/nltk_data" >> $GITHUB_ENV
    - name: Setup models using setup_tools
      env:
        NLTK_DATA: ${{ env.NLTK_DATA }}
      run: |
        python -m anpe.utils.setup_models
      timeout-minutes: 10
    - name: Verify model downloads
      env:
        NLTK_DATA: ${{ env.NLTK_DATA }}
      run: |
        python -c "
        import nltk
        import benepar
        import spacy
        assert nltk.data.find('tokenizers/punkt') is not None
        assert benepar.download('benepar_en3') is not None
        assert spacy.util.is_package('en_core_web_sm')
        "
    - name: Install package
      run: |
        pip install -e .
    - name: Run tests
      env:
        NLTK_DATA: ${{ env.NLTK_DATA }}
      run: |
        pytest tests/ --cov=anpe --cov-report=xml
      timeout-minutes: 15
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  publish:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatchling twine
    - name: Build and publish
      env:
        TWINE_USERNAME: rcverse
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m build
        python -m twine upload dist/* 